1. problem link: https://leetcode.com/problems/flip-equivalent-binary-trees</h>

2. solution (recursive, c++):

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
        if (root1 == NULL && root2 == NULL) {
            return true;
        }
        
        if (root1 == NULL || root2 == NULL) {
            return false;
        }
        
        if (root1->val != root2->val) {
            return false;
        } 
        
        bool ret1 = flipEquiv(root1->left, root2->left) &&  flipEquiv(root1->right, root2->right) ;
        bool ret2 = flipEquiv(root1->left, root2->right) &&  flipEquiv(root1->right, root2->left) ;
        
        return ret1 || ret2;
    }
};
